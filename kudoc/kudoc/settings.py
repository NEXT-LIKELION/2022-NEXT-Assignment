"""
Django settings for kudoc project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'n&e=i582(ughb-xi0s%sb@1sa!nh$a%tyi1k*^0%5zt9j_yhit'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    # 생성 app
    'appAccount',
    'appMain',
    # input tag 수정하기 위한 패키지
    'widget_tweaks',
    # allauth 세팅
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.kakao',
    'allauth.socialaccount.providers.google',
    'phonenumber_field',
    'phonenumbers',
]

# django.contrib.sites 장고 여러 기능을 장고 웹사이트 내에서 사용할 수 있도록 해준다.
# 장고 웹사이트 하나로 여러 웹사이트를 운영할 수 있다.

# SITE_ID는 각각의 사이트 아이디라고 생각하면 된다.

SITE_ID = 1


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'kudoc.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'kudoc.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'ko'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'


# LOGIN_URL = 'login'

# ACCOUNT_USER_MODEL_USERNAME_FIELD = None
# ACCOUNT_EMAIL_REQUIRED = True
# ACCOUNT_USERNAME_REQUIRED = False
# ACCOUNT_AUTHENTICATION_METHOD = 'email'


# Auth Settingss

# user db account에 있는 db로 통일시키기
AUTH_USER_MODEL = "appAccount.User"


# Auth 유저 정보 자동으로 만들어주기
AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

# 회원가입하고, 다시 홈페이지로 돌아오도록 만들기
ACCOUNT_SIGNUP_REDIRECT_URL = "index"

# 로그인하고, 다시 홈페이지로 돌아오도록 만들기
LOGIN_REDIRECT_URL = "index"

# ACCOUNT_LOGOUT_ON_GET의 기본값이 False인데, True로 바꿔주면, 바로 로그아웃됨.
ACCOUNT_LOGOUT_ON_GET = True
ACCOUNT_AUTHENTICATION_METHOD = "email"
# ACCOUNT_AUTHNTICATION_METHOD = "username_email"의 경우 유저네임 이메일로 동시에 가입가능

# 이메일 필수로 받기
ACCOUNT_EMAIL_REQUIRED = True
# 유저네임 필수로 받지 않기
ACCOUNT_USERNAME_REQUIRED = False

# signup할 때, 여기를 참조하라는 것
ACCOUNT_SIGNUP_FORM_CLASS = "appAccount.forms.SignupForm"

# 세션을 브라우져를 닫았을 때도 기억해주겠다에 해당하는 것
# 기본값은 false
ACCOUNT_SESSION_REMEMBER = True

# 회원가입 당시 password오류가 나도 비밀번호를 그대로 채워줌
ACCOUT_PASSWORD_INPUT_RENDER_VALUE = True

# 이메일 관련

# 유저가 로그인 되었을 때, 이메일 인증
ACCOUT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = "account_email_confirmation_done"

# 유저가 로그인되지 않았을 때, 이메일 인증
ACCOUT_EMAIL_CONFIRMATION_ANOYMOUS_REDIRECT_URL = "account_email_confirmation_done"

# 이메일 인증 안 해도 됨
# ACCOUNT_EMAIL_VARIFICATION = "optional"
# 이메일 인증 메일 사용 안 해도 됨
# ACCOUNT_EMAIL_VARIFICATION = "none"
# 이메일을 의무적으로 해야함
ACCOUNT_EMAIL_VARIFICATION = "mandatory"


'''
세션 쿠키의 기본값은 2주, 
초단위, 3600초 1시간
SESSION_COOKIE_AGE = 3600
'''


# EMail settings

# gmail smtp를 연결하기 위한 것
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True

EMAIL_HOST_USER = "kudocjoayo@gmail.com"
EMAIL_HOST_PASSWORD = "kudoc1234"
